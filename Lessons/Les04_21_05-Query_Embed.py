# Müller Alexader
# \033[0;__;__m \033[m   or   \033[1;__;__m \033[m
# print('#' * 115)      # Для разделения блоков на листе с кодом:
""" ################################################################################################################
 21.05.25
 AI  &  Python 4: Обработка запросов и таймаутов. Эмбеддинги и векторные представления.
 ################################################################################################################### """

# Ссылка на все файлы с кодом для этой лекции:
#       https://github.com/viacheslav-bandylo/llm-course/tree/main/lesson-ai-04

# ------------------------ SHORTCUTS ------------------------
# Ctrl + W - выделить текущий блок. если нажимать это сочетание дальше, то будут выделяться родительские блоки.
# Ctrl+Y - Удаление всей строки. Кстати, команда копирования Ctrl+C без выделения также работает для всей строки.
# Ctrl+Akt+L / Alt+Enter - Привести код к принятым стандартам (для Python - PEP8).
# Ctrl+R — Изменить название класса/функции и т. п. по всему проекту.
# Ctrl+Shift + F - Найти по всем файлам.
# Shift + F6 - заменить имя элемента во всех частях во всех файлах.
# -----------------------------------------------------------

print('.' * 80)


# Активация виртуального окружения командой в консоли:
# https://ru.stackoverflow.com/questions/1388073/%D0%9A%D0%B0%D0%BA-%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D1%82%D0%B8%D1%82%D1%8C-%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D1%83%D1%8E-%D1%81%D1%80%D0%B5%D0%B4%D1%83-venv-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D0%BA%D0%BE%D0%BD%D1%81%D0%BE%D0%BB%D1%8C-pycharm
# . ./.venv/bin/activate

"""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%______   Обработка запросов и таймаутов   ______%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """

""" __________ Ограничения скорости __________ """
# Ограничения скорости --> Решение: Slide 13, Video 4, 15:00.
# File on GitHub: https://github.com/viacheslav-bandylo/llm-course/blob/main/lesson-ai-04/ai4-1.py

""" __________ Что делать, если запрос "зависает"? __________ """
# Что делать, если запрос "зависает"? --> Решение: Slide 14, Video 4, 20:00.
# File on GitHub: https://github.com/viacheslav-bandylo/llm-course/blob/main/lesson-ai-04/ai4-2.py

""" __________ Автоматический повтор запроса __________ """
# Автоматический повтор запроса --> Решение: Slide 16, Video 4, 25:00.
# File on GitHub: https://github.com/viacheslav-bandylo/llm-course/blob/main/lesson-ai-04/ai4-3.py



"""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%___________   Эмбеддинги и       __________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
""""                                         векторные представления                                           """
# Video 4, 37:00.

""" __________ Эмбеддинг __________ """
# - числовое представление текста, которое позволяет AI понимать смысл слов и предложений.
# Чем ближе числа в векторе, тем ближе слова по смыслу.

""" __________ Как AI определяет схожесть текстов __________ """
# Как AI определяет схожесть текстов --> Решение: Slide 29, Video 4, 43:00.
# File on GitHub: https://github.com/viacheslav-bandylo/llm-course/blob/main/lesson-ai-04/ai4-4.py

""" __________ Построение векторных баз данных __________ """
# Построение векторных баз данных --> Решение: Slide 35, Video 4, 1:00:00.
# Сначала установить библиотеку faiss через команду в консоли:
# pip install faiss     или, если первый способ не сработает    pip install faiss-cpu
# File on GitHub: https://github.com/viacheslav-bandylo/llm-course/blob/main/lesson-ai-04/ai4-5.py





""" ___________________________________  Review of previously covered material  ___________________________________ """
"""" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%___________   ---   __________%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% """
""" __________ --- __________ """
""" __________ --- __________ """
#       ●
# ___ EXAMPLE __________________________________________________
# ___ END of Example __________________________________________________


""" ______  Task 1  ______________________________________________________________________________________________ """
#


